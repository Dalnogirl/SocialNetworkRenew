{"version":3,"sources":["Components/Dialogs/Interluctor/Interluctor.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/DialogsTextarea/DialogsTextarea.js","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","HOC/withAuthRedirect.tsx","Components/Dialogs/Dialogs.module.scss","Components/Dialogs/Interluctor/Interluctor.module.scss","Components/Dialogs/Message/Message.module.scss"],"names":["Interluctor","props","className","style","interluctor","to","id","name","Message","message","text","DialogsTextarea","onSubmit","formData","addMessage","messageText","handleSubmit","component","validate","required","input","meta","textarea","cols","rows","error","touched","Dialogs","content","interluctors","map","item","messages","key","dialogsActions","compose","connect","state","getMessages","getInterluctors","withAuthRedirect","_objectWithoutProperties","source","excluded","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","mapStateToProps","isAuth","auth","Component","restProps","module","exports"],"mappings":"4KAiBeA,EAbK,SAACC,GAIjB,OACI,6BACI,kBAAC,IAAD,CAASC,UAAWC,IAAMC,YAAaC,GAAE,mBAAcJ,EAAMK,KAAOL,EAAMM,Q,iBCEvEC,EARC,SAACP,GACb,OACI,yBAAKC,UAAWC,IAAMM,SAAUR,EAAMS,O,gBCDnCC,EAAkB,SAACV,GAC1B,OACI,kBAAC,IAAD,CAAMW,SAAU,SAACC,GACbZ,EAAMa,WAAWD,EAASE,gBAEzB,SAACd,GAAD,OAAY,0BAAMW,SAAUX,EAAMe,cAC/B,kBAAC,IAAD,CACIT,KAAI,cACJU,UAAS,WACbC,SAAUC,MAEL,gBAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,KAAT,OAAoB,6BACb,4CAAUnB,UAAWC,IAAMmB,UAAcF,EAAzC,CAAgDG,KAAK,KAAKC,KAAK,QAE/D,6BACKH,EAAKI,OAASJ,EAAKK,SAAW,8BAAOL,EAAKI,YAM3D,6CCIDE,EAjBC,SAAC1B,GACb,OACI,yBAAKC,UAAWC,IAAMyB,SAClB,yBAAK1B,UAAWC,IAAM0B,cACjB5B,EAAM4B,aAAaC,KAAI,SAACC,GAAD,OAA2B,kBAAC,EAAD,CAAaxB,KAAMwB,EAAKxB,KAAMD,GAAIyB,EAAKzB,SAE9F,yBAAKJ,UAAWC,IAAM6B,UAClB,yBAAK9B,UAAWC,IAAM6B,UACjB/B,EAAM+B,SACFF,KAAI,SAACC,GAAD,OAAsB,kBAAC,EAAD,CAASE,IAAK,EAAGvB,KAAMqB,EAAKrB,WAE/D,kBAAC,EAAD,CAAiBI,WAAYb,EAAMa,gB,gCCK/CA,EAAaoB,IAAepB,WACjBqB,sBACXC,aArBkB,SAACC,GACnB,MAAO,CACHL,SAAUM,YAAYD,GACtBR,aAAcU,YAAgBF,MAkB4D,CAACvB,eAC/F0B,IAFWL,CAGbR,I,gCChCa,SAASc,EAAyBC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IACIT,EAAKW,EADLC,ECHS,SAAuCH,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIT,EAAKW,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKN,GAG7B,IAAKE,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCX,EAAMa,EAAWF,GACbD,EAASO,QAAQjB,IAAQ,IAC7BY,EAAOZ,GAAOS,EAAOT,IAGvB,OAAOY,EDTM,CAA6BH,EAAQC,GAGlD,GAAII,OAAOI,sBAAuB,CAChC,IAAIC,EAAmBL,OAAOI,sBAAsBT,GAEpD,IAAKE,EAAI,EAAGA,EAAIQ,EAAiBH,OAAQL,IACvCX,EAAMmB,EAAiBR,GACnBD,EAASO,QAAQjB,IAAQ,GACxBc,OAAOM,UAAUC,qBAAqBC,KAAKb,EAAQT,KACxDY,EAAOZ,GAAOS,EAAOT,IAIzB,OAAOY,E,qEENLW,EAAkB,SAACnB,GAAD,MAA0B,CAC5CoB,OAAQpB,EAAMqB,KAAKD,SAGhB,SAASjB,EAAsBmB,GAUlC,OAAOvB,YACHoB,EAAiB,GADdpB,EATgD,SAACnC,GAAW,IAC1DwD,EAAwBxD,EAAxBwD,OAAWG,EAD8C,EACjC3D,EADiC,YAE9D,OAAKwD,EAGE,kBAACE,EAAcC,GAHF,kBAAC,IAAD,CAAUvD,GAAE,gB,mBCjBxCwD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,aAAe,8BAA8B,SAAW,0BAA0B,SAAW,4B,mBCA7LD,EAAOC,QAAU,CAAC,YAAc,mC,mBCAhCD,EAAOC,QAAU,CAAC,QAAU","file":"static/js/4.2470e435.chunk.js","sourcesContent":["import React from 'react';\nimport style from './Interluctor.module.scss';\nimport {NavLink} from \"react-router-dom\";\n\nconst Interluctor = (props: {\n    name: string\n    id: number\n}) => {\n    return (\n        <div>\n            <NavLink className={style.interluctor} to={`/dialogs/${props.id}`}>{props.name}</NavLink>\n        </div>\n    )\n\n}\n\n\nexport default Interluctor;\n","import React from 'react';\nimport style from './Message.module.scss';\n\n\nconst Message = (props: { text: string }) => {\n    return (\n        <div className={style.message}>{props.text}</div>\n    )\n\n}\n\n\nexport default Message;\n","import React from \"react\";\r\nimport {Field, Form} from \"react-final-form\";\r\nimport {required} from \"../../../utilits/validators\";\r\nimport style from '../Dialogs.module.scss'\r\n\r\nexport let DialogsTextarea = (props) => {\r\n    return (\r\n        <Form onSubmit={(formData) => {\r\n            props.addMessage(formData.messageText)\r\n        }}>\r\n            {(props) => (<form onSubmit={props.handleSubmit}>\r\n                <Field\r\n                    name={`messageText`}\r\n                    component={`textarea`}\r\n                validate={required}>\r\n\r\n                    {({input, meta}) => (<div>\r\n                            <textarea className={style.textarea} {...input} cols=\"30\" rows=\"10\">\r\n                            </textarea>\r\n                            <div>\r\n                                {meta.error && meta.touched && <span>{meta.error}</span>}\r\n                            </div>\r\n                        </div>\r\n\r\n                    )}\r\n                </Field>\r\n                <button>Send</button>\r\n            </form>)}\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport style from './Dialogs.module.scss';\nimport Interluctor from \"./Interluctor/Interluctor\";\nimport Message from \"./Message/Message\";\nimport {Redirect} from \"react-router-dom\";\nimport {DialogsTextarea} from \"./DialogsTextarea/DialogsTextarea\";\nimport {InterluctorType, MessageType} from \"../../redux/reducers/dialogs-reducer\";\n\ntype PropsType = {\n    messages: Array<MessageType>\n    interluctors: Array<InterluctorType>\n    addMessage: (text: string)=>void\n}\nconst Dialogs = (props:PropsType) => {\n    return (\n        <div className={style.content}>\n            <div className={style.interluctors}>\n                {props.interluctors.map((item: InterluctorType) => <Interluctor name={item.name} id={item.id}/>)}\n            </div>\n            <div className={style.messages}>\n                <div className={style.messages}>\n                    {props.messages\n                        .map((item:MessageType) => <Message key={1} text={item.text} />)}\n                </div>\n                <DialogsTextarea addMessage={props.addMessage}/>\n            </div>\n        </div>\n    );\n}\n\nexport default Dialogs;\n","import React from 'react';\nimport {dialogsActions, InterluctorType, MessageType} from \"../../redux/reducers/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport {getInterluctors, getMessages} from \"../../redux/selectors/selectors\";\nimport {AppStateType} from \"../../redux/redux-store\";\n\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        messages: getMessages(state),\n        interluctors: getInterluctors(state),\n    }\n}\n\n\ntype MapStatePropsType = {\n    messages: Array<MessageType>\n    interluctors: Array<InterluctorType>\n}\ntype MapDispatchPropsType = {\n    addMessage: (messageText: string) => void\n\n}\ntype OwnPropsType ={\n}\n\nlet addMessage = dialogsActions.addMessage\nexport default compose<React.ComponentType>(\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, {addMessage}),\n    withAuthRedirect,\n)(Dialogs)\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MSTPType = {\r\n    isAuth: boolean\r\n}\r\ntype MDTPType = {\r\n}\r\ntype OwnType = {}\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>) {\r\n    let RedirectComponent: React.FC<MSTPType & MDTPType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={`/login`}/>\r\n\r\n        //нужно убирать isAuth, тк это пропсы именно хока и редирект компоненты\r\n        return <Component {...restProps as WCP}/>\r\n    }\r\n\r\n\r\n    return connect<MSTPType, MDTPType, WCP, AppStateType>(\r\n        mapStateToProps, {\r\n\r\n        })\r\n    (RedirectComponent)\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Dialogs_content__1hpPI\",\"interluctor\":\"Dialogs_interluctor__3FyTG\",\"interluctors\":\"Dialogs_interluctors__csH69\",\"messages\":\"Dialogs_messages__3eaj-\",\"textarea\":\"Dialogs_textarea__18M_J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"interluctor\":\"Interluctor_interluctor__1bK7Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3-FPj\"};"],"sourceRoot":""}